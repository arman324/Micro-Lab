;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/16/2020
;Author  : Arman Riasi
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <define.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;int i = 0;
;long int count = 0;
;int j = 0;
;int myMax = 0;
;int myMin = 0;
;
;long x;
;long y;
;int second = 10;

	.DSEG
;int minute = 55;
;int hour = 8;
;
;
;
;
;
;// Declare your global variables here
;const unsigned short AR16x8[] = {
;        0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00,  // Code for cha ...
;        0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00,  // Code for cha ...
;        0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC,  // Code for cha ...
;        0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE,  // Code for cha ...
;        0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13,  // Code for cha ...
;        0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13,  // Code for cha ...
;        0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13,  // Code for cha ...
;        0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE,  // Code for cha ...
;        0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC,  // Code for cha ...
;        0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00,  // Code for cha ...
;        0xFF, 0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF,  // Code for cha ...
;        0x39, 0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF,  // Code for cha ...
;        0x69, 0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39,  // Code for cha ...
;        0xCF, 0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69,  // Code for cha ...
;        0x86, 0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF,  // Code for cha ...
;        0x00, 0x00, 0xFC, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0xFC, 0x00, 0xFF, 0xFF, 0x39, 0x69, 0xCF, 0x86   // Code for cha ...
;        };
;
;
;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0043 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0044     // Reinitialize Timer1 value
; 0000 0045     TCNT1H=0x85EE >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0046     TCNT1L=0x85EE & 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0047 
; 0000 0048 
; 0000 0049    Question_03();
;PCODE: $00000013 VOL: 0
; 0000 004A 
; 0000 004B }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;
;void main(void)
; 0000 004F {
;PCODE: $00000017 VOL: 0
; 0000 0050     // Declare your local variables here
; 0000 0051     // Variable used to store graphic display
; 0000 0052     // controller initialization data
; 0000 0053     GLCDINIT_t glcd_init_data;
; 0000 0054     IO_Init();
;PCODE: $00000018 VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $00000019 VOL: 0
; 0000 0055     // Graphic Display Controller initialization
; 0000 0056     // The KS0108 connections are specified in the
; 0000 0057     // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 0058     // DB0 - PORTC Bit 0
; 0000 0059     // DB1 - PORTC Bit 1
; 0000 005A     // DB2 - PORTC Bit 2
; 0000 005B     // DB3 - PORTC Bit 3
; 0000 005C     // DB4 - PORTC Bit 4
; 0000 005D     // DB5 - PORTC Bit 5
; 0000 005E     // DB6 - PORTC Bit 6
; 0000 005F     // DB7 - PORTC Bit 7
; 0000 0060     // E - PORTD Bit 0
; 0000 0061     // RD /WR - PORTD Bit 1
; 0000 0062     // RS - PORTD Bit 2
; 0000 0063     // /RST - PORTD Bit 3
; 0000 0064     // CS1 - PORTD Bit 4
; 0000 0065     // CS2 - PORTD Bit 5
; 0000 0066 
; 0000 0067     // Specify the current font for displaying text
; 0000 0068     glcd_init_data.font=font5x7;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0069     // No function is used for reading
; 0000 006A     // image data from external memory
; 0000 006B     glcd_init_data.readxmem=NULL;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 006C     // No function is used for writing
; 0000 006D     // image data to external memory
; 0000 006E     glcd_init_data.writexmem=NULL;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006F 
; 0000 0070     glcd_init(&glcd_init_data);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0071 
; 0000 0072 
; 0000 0073     TimerInit();
;PCODE: $00000022 VOL: 0
; 0000 0074 
; 0000 0075 
; 0000 0076 
; 0000 0077 
; 0000 0078     ////// Question_04 =>
; 0000 0079 
; 0000 007A     Question_02();
;PCODE: $00000023 VOL: 0
; 0000 007B     delay_ms(3000);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 007C     // Global enable interrupts
; 0000 007D     #asm("sei")
;PCODE: $00000026 VOL: 0
	sei
;PCODE: $00000027 VOL: 0
; 0000 007E     delay_ms(5000);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 007F     #asm("cli")
;PCODE: $0000002A VOL: 0
	cli
;PCODE: $0000002B VOL: 0
; 0000 0080     Question_01();
;PCODE: $0000002C VOL: 0
; 0000 0081 
; 0000 0082 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
