
AVRASM ver. 2.1.30  C:\cvavr\BIN\Lab02\Debug\List\Lab02.asm Tue Oct 06 14:57:32 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 003f
00002b 0006
00002c 005b
00002d 004f      	.DB  0x3F,0x0,0x6,0x0,0x5B,0x0,0x4F,0x0
00002e 0066
00002f 006d
000030 007d
000031 0007      	.DB  0x66,0x0,0x6D,0x0,0x7D,0x0,0x7,0x0
000032 007f
C:\cvavr\BIN\Lab02\Debug\List\Lab02.asm(1119): warning: .cseg .db misalignment - padding zero byte
000033 006f      	.DB  0x7F,0x0,0x6F
                 
                 __GLOBAL_INI_TBL:
000034 0013      	.DW  0x13
000035 0162      	.DW  _sevenSeg
000036 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003f e08d      	LDI  R24,(14-2)+1
000040 e0a2      	LDI  R26,2
000041 27bb      	CLR  R27
                 __CLEAR_REG:
000042 93ed      	ST   X+,R30
000043 958a      	DEC  R24
000044 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000045 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000046 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000047 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000048 93ed      	ST   X+,R30
000049 9701      	SBIW R24,1
00004a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004b e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004d 9185      	LPM  R24,Z+
00004e 9195      	LPM  R25,Z+
00004f 9700      	SBIW R24,0
000050 f061      	BREQ __GLOBAL_INI_END
000051 91a5      	LPM  R26,Z+
000052 91b5      	LPM  R27,Z+
000053 9005      	LPM  R0,Z+
000054 9015      	LPM  R1,Z+
000055 01bf      	MOVW R22,R30
000056 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000057 9005      	LPM  R0,Z+
000058 920d      	ST   X+,R0
000059 9701      	SBIW R24,1
00005a f7e1      	BRNE __GLOBAL_INI_LOOP
00005b 01fb      	MOVW R30,R22
00005c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005e bfed      	OUT  SPL,R30
00005f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000060 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000061 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000062 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000063 940c 0065 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * Lab02.c
                 ; *
                 ; * Created: 10/4/2020 3:23:32 PM
                 ; * Author: Arman Riasi
                 ; */
                 ;
                 ;
                 ;#include <define.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;int count;
                 ;unsigned int sevenSeg[] = {
                 ;    0b00111111, //showing number 0 on 7_seg
                 ;    0b00000110, //showing number 1 on 7_seg
                 ;    0b01011011, //showing number 2 on 7_seg
                 ;    0b01001111, //showing number 3 on 7_seg
                 ;    0b01100110, //showing number 4 on 7_seg
                 ;    0b01101101, //showing number 5 on 7_seg
                 ;    0b01111101, //showing number 6 on 7_seg
                 ;    0b00000111, //showing number 7 on 7_seg
                 ;    0b01111111, //showing number 8 on 7_seg
                 ;    0b01101111, //showing number 9 on 7_seg
                 ;};
                 
                 	.DSEG
                 ;
                 ;
                 ;void main(void)
                 ; 0000 001A {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001B     //question_01(12,portB,250);
                 ; 0000 001C     //question_02(400, position2);
                 ; 0000 001D     //question_03(portB,pinA);
                 ; 0000 001E     //question_04(decrease, thirdSevenSegOn);
                 ; 0000 001F     question_05(5); //choose only number 1 or number 2 or number 5, another input numbers will alter to 5
000065 e0a5      	LDI  R26,LOW(5)
000066 e0b0      	LDI  R27,0
000067 d001      	RCALL _question_05
                 ; 0000 0020 }
                 _0x4:
000068 cfff      	RJMP _0x4
                 ; .FEND
                 ;
                 ;
                 ;
                 ;#include <define.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void question_01(int number,char portSelect, int delayTime){
                 ; 0001 0006 void question_01(int number,char portSelect, int delayTime){
                 
                 	.CSEG
                 ; 0001 0007     count = 0;
                 ;	number -> Y+3
                 ;	portSelect -> Y+2
                 ;	delayTime -> Y+0
                 ; 0001 0008 
                 ; 0001 0009     while(count < number){
                 ; 0001 000A         switch(portSelect){
                 ; 0001 000B          case portA:
                 ; 0001 000C             DDRA = 0xFF;
                 ; 0001 000D             PORTA = 0xFF;
                 ; 0001 000E             delay_ms(delayTime);
                 ; 0001 000F             PORTA = 0x00;
                 ; 0001 0010             delay_ms(delayTime);
                 ; 0001 0011             break;
                 ; 0001 0012 
                 ; 0001 0013          case portB:
                 ; 0001 0014             DDRB = 0xFF;
                 ; 0001 0015             PORTB = 0xFF;
                 ; 0001 0016             delay_ms(delayTime);
                 ; 0001 0017             PORTB = 0x00;
                 ; 0001 0018             delay_ms(delayTime);
                 ; 0001 0019             break;
                 ; 0001 001A 
                 ; 0001 001B          case portC:
                 ; 0001 001C             DDRC = 0xFF;
                 ; 0001 001D             PORTC = 0xFF;
                 ; 0001 001E             delay_ms(delayTime);
                 ; 0001 001F             PORTC = 0x00;
                 ; 0001 0020             delay_ms(delayTime);
                 ; 0001 0021             break;
                 ; 0001 0022 
                 ; 0001 0023          case portD:
                 ; 0001 0024             DDRD = 0xFF;
                 ; 0001 0025             PORTD = 0xFF;
                 ; 0001 0026             delay_ms(delayTime);
                 ; 0001 0027             PORTD = 0x00;
                 ; 0001 0028             delay_ms(delayTime);
                 ; 0001 0029             break;
                 ; 0001 002A 
                 ; 0001 002B          default:
                 ; 0001 002C             DDRD = 0xFF;
                 ; 0001 002D             PORTD = 0xFF;
                 ; 0001 002E             delay_ms(delayTime);
                 ; 0001 002F             PORTD = 0x00;
                 ; 0001 0030             delay_ms(delayTime);
                 ; 0001 0031             break;
                 ; 0001 0032      }
                 ; 0001 0033          count++;
                 ; 0001 0034     }
                 ; 0001 0035 
                 ; 0001 0036 }
                 ;
                 ;void question_02(int delayTime, int position){
                 ; 0001 0038 void question_02(int delayTime, int position){
                 ; 0001 0039     char currentPosition;
                 ; 0001 003A     DDRB = 0xFF;
                 ;	delayTime -> Y+3
                 ;	position -> Y+1
                 ;	currentPosition -> R17
                 ; 0001 003B     count = 0;
                 ; 0001 003C     currentPosition = position;
                 ; 0001 003D     while(1){
                 ; 0001 003E 
                 ; 0001 003F             if (currentPosition == 0) {
                 ; 0001 0040                 PORTB = 0b00000001;
                 ; 0001 0041                 delay_ms(delayTime);
                 ; 0001 0042                 currentPosition ++;
                 ; 0001 0043                 count++;
                 ; 0001 0044                 if (count == 16) break;
                 ; 0001 0045             }
                 ; 0001 0046 
                 ; 0001 0047             if (currentPosition == 1) {
                 ; 0001 0048                 PORTB = 0b00000010;
                 ; 0001 0049                 delay_ms(delayTime);
                 ; 0001 004A                 currentPosition ++;
                 ; 0001 004B                 count++;
                 ; 0001 004C                 if (count == 16) break;
                 ; 0001 004D             }
                 ; 0001 004E 
                 ; 0001 004F             if (currentPosition == 2) {
                 ; 0001 0050                 PORTB = 0b00000100;
                 ; 0001 0051                 delay_ms(delayTime);
                 ; 0001 0052                 currentPosition ++;
                 ; 0001 0053                 count++;
                 ; 0001 0054                 if (count == 16) break;
                 ; 0001 0055             }
                 ; 0001 0056 
                 ; 0001 0057             if (currentPosition == 3) {
                 ; 0001 0058                 PORTB = 0b00001000;
                 ; 0001 0059                 delay_ms(delayTime);
                 ; 0001 005A                 currentPosition ++;
                 ; 0001 005B                 count++;
                 ; 0001 005C                 if (count == 16) break;
                 ; 0001 005D             }
                 ; 0001 005E 
                 ; 0001 005F             if (currentPosition == 4) {
                 ; 0001 0060                 PORTB = 0b00010000;
                 ; 0001 0061                 delay_ms(delayTime);
                 ; 0001 0062                 currentPosition ++;
                 ; 0001 0063                 count++;
                 ; 0001 0064                 if (count == 16) break;
                 ; 0001 0065             }
                 ; 0001 0066 
                 ; 0001 0067             if (currentPosition == 5) {
                 ; 0001 0068                 PORTB = 0b00100000;
                 ; 0001 0069                 delay_ms(delayTime);
                 ; 0001 006A                 currentPosition ++;
                 ; 0001 006B                 count++;
                 ; 0001 006C                 if (count == 16) break;
                 ; 0001 006D 
                 ; 0001 006E             }
                 ; 0001 006F 
                 ; 0001 0070             if (currentPosition == 6) {
                 ; 0001 0071                 PORTB = 0b01000000;
                 ; 0001 0072                 delay_ms(delayTime);
                 ; 0001 0073                 currentPosition ++;
                 ; 0001 0074                 count++;
                 ; 0001 0075                 if (count == 16) break;
                 ; 0001 0076             }
                 ; 0001 0077 
                 ; 0001 0078             if (currentPosition == 7) {
                 ; 0001 0079                 PORTB = 0b10000000;
                 ; 0001 007A                 delay_ms(delayTime);
                 ; 0001 007B                 currentPosition = 0;
                 ; 0001 007C                 count++;
                 ; 0001 007D                 if (count == 16) break;
                 ; 0001 007E             }
                 ; 0001 007F 
                 ; 0001 0080 
                 ; 0001 0081 
                 ; 0001 0082     }
                 ; 0001 0083 
                 ; 0001 0084     PORTB = 0x00;
                 ; 0001 0085 }
                 ;
                 ;
                 ;void question_03(char outputPortSelect, char inputPortSelect){
                 ; 0001 0088 void question_03(char outputPortSelect, char inputPortSelect){
                 ; 0001 0089     unsigned int temp;
                 ; 0001 008A     count = 0;
                 ;	outputPortSelect -> Y+3
                 ;	inputPortSelect -> Y+2
                 ;	temp -> R16,R17
                 ; 0001 008B     temp = 0;
                 ; 0001 008C 
                 ; 0001 008D     while(1){
                 ; 0001 008E         switch(inputPortSelect){
                 ; 0001 008F          case pinA:
                 ; 0001 0090             DDRA = 0x00;
                 ; 0001 0091             temp = PINA;
                 ; 0001 0092             break;
                 ; 0001 0093 
                 ; 0001 0094          case pinB:
                 ; 0001 0095             DDRB = 0x00;
                 ; 0001 0096             temp = PINB;
                 ; 0001 0097             break;
                 ; 0001 0098 
                 ; 0001 0099          case pinC:
                 ; 0001 009A             DDRC = 0x00;
                 ; 0001 009B             temp = PINC;
                 ; 0001 009C             break;
                 ; 0001 009D 
                 ; 0001 009E          case pinD:
                 ; 0001 009F             DDRD = 0x00;
                 ; 0001 00A0             temp = PIND;
                 ; 0001 00A1             break;
                 ; 0001 00A2 
                 ; 0001 00A3          default:
                 ; 0001 00A4             DDRA = 0x00;
                 ; 0001 00A5             temp = PINA;
                 ; 0001 00A6             break;
                 ; 0001 00A7      }
                 ; 0001 00A8 
                 ; 0001 00A9 
                 ; 0001 00AA         switch(outputPortSelect){
                 ; 0001 00AB          case portA:
                 ; 0001 00AC             DDRA = 0xFF;
                 ; 0001 00AD             PORTA = temp;
                 ; 0001 00AE             break;
                 ; 0001 00AF 
                 ; 0001 00B0          case portB:
                 ; 0001 00B1             DDRB = 0xFF;
                 ; 0001 00B2             PORTB = temp;
                 ; 0001 00B3             break;
                 ; 0001 00B4 
                 ; 0001 00B5          case portC:
                 ; 0001 00B6             DDRC = 0xFF;
                 ; 0001 00B7             PORTC = temp;
                 ; 0001 00B8             break;
                 ; 0001 00B9 
                 ; 0001 00BA          case portD:
                 ; 0001 00BB             DDRD = 0xFF;
                 ; 0001 00BC             PORTD = temp;
                 ; 0001 00BD             break;
                 ; 0001 00BE 
                 ; 0001 00BF          default:
                 ; 0001 00C0             DDRB = 0xFF;
                 ; 0001 00C1             PORTB = temp;
                 ; 0001 00C2             break;
                 ; 0001 00C3      }
                 ; 0001 00C4 
                 ; 0001 00C5    // count ++;
                 ; 0001 00C6   //  if (count == 50) break;
                 ; 0001 00C7 
                 ; 0001 00C8     }
                 ; 0001 00C9 }
                 ;
                 ;void question_04(int direction, int sevenSegOn){
                 ; 0001 00CB void question_04(int direction, int sevenSegOn){
                 ; 0001 00CC     DDRD = 0x0F;
                 ;	direction -> Y+2
                 ;	sevenSegOn -> Y+0
                 ; 0001 00CD     DDRC = 0xFF;
                 ; 0001 00CE 
                 ; 0001 00CF     switch(sevenSegOn){
                 ; 0001 00D0         case allSevenSegOn:
                 ; 0001 00D1             PORTD = 0x00;
                 ; 0001 00D2             break;
                 ; 0001 00D3         case firstSevenSegOn:
                 ; 0001 00D4             PORTD = 0b00001110;
                 ; 0001 00D5             break;
                 ; 0001 00D6         case secondSevenSegOn:
                 ; 0001 00D7             PORTD = 0b00001101;
                 ; 0001 00D8             break;
                 ; 0001 00D9         case thirdSevenSegOn:
                 ; 0001 00DA             PORTD = 0b00001011;
                 ; 0001 00DB             break;
                 ; 0001 00DC         case fourthSevenSegOn:
                 ; 0001 00DD             PORTD = 0b00000111;
                 ; 0001 00DE             break;
                 ; 0001 00DF         default:
                 ; 0001 00E0             PORTD = 0x00;
                 ; 0001 00E1             break;
                 ; 0001 00E2     }
                 ; 0001 00E3 
                 ; 0001 00E4 
                 ; 0001 00E5     if (direction == decrease){
                 ; 0001 00E6         for (count = 9; count >= 0; count--){
                 ; 0001 00E7          PORTC = sevenSeg[count];
                 ; 0001 00E8          delay_ms(500);
                 ; 0001 00E9         }
                 ; 0001 00EA     }
                 ; 0001 00EB     if (direction == increase){
                 ; 0001 00EC         for (count = 0; count <= 9; count++){
                 ; 0001 00ED          PORTC = sevenSeg[count];
                 ; 0001 00EE          delay_ms(500);
                 ; 0001 00EF         }
                 ; 0001 00F0     }
                 ; 0001 00F1 
                 ; 0001 00F2 }
                 ;
                 ;
                 ;
                 ;void question_05(int amountOfReduction) {
                 ; 0001 00F6 void question_05(int amountOfReduction) {
                 _question_05:
                 ; .FSTART _question_05
                 ; 0001 00F7      int temp;
                 ; 0001 00F8      unsigned int firstSevenSeg;
                 ; 0001 00F9      unsigned int secondSevenSeg;
                 ; 0001 00FA      unsigned int thirdSevenSeg;
                 ; 0001 00FB      unsigned int fourthSevenSeg;
                 ; 0001 00FC 
                 ; 0001 00FD      if (amountOfReduction != 1 && amountOfReduction != 2 && amountOfReduction != 5){ //error handling
000069 93ba      	ST   -Y,R27
00006a 93aa      	ST   -Y,R26
00006b 9724      	SBIW R28,4
00006c 940e 0164 	CALL __SAVELOCR6
                 ;	amountOfReduction -> Y+10
                 ;	temp -> R16,R17
                 ;	firstSevenSeg -> R18,R19
                 ;	secondSevenSeg -> R20,R21
                 ;	thirdSevenSeg -> Y+8
                 ;	fourthSevenSeg -> Y+6
00006e 85aa      	LDD  R26,Y+10
00006f 85bb      	LDD  R27,Y+10+1
000070 9711      	SBIW R26,1
000071 f041      	BREQ _0x20046
000072 85aa      	LDD  R26,Y+10
000073 85bb      	LDD  R27,Y+10+1
000074 9712      	SBIW R26,2
000075 f021      	BREQ _0x20046
000076 85aa      	LDD  R26,Y+10
000077 85bb      	LDD  R27,Y+10+1
000078 9715      	SBIW R26,5
000079 f409      	BRNE _0x20047
                 _0x20046:
00007a c004      	RJMP _0x20045
                 _0x20047:
                 ; 0001 00FE         amountOfReduction = 5;
00007b e0e5      	LDI  R30,LOW(5)
00007c e0f0      	LDI  R31,HIGH(5)
00007d 87ea      	STD  Y+10,R30
00007e 87fb      	STD  Y+10+1,R31
                 ; 0001 00FF      }
                 ; 0001 0100 
                 ; 0001 0101      DDRA = 0x00;
                 _0x20045:
00007f e0e0      	LDI  R30,LOW(0)
000080 bbea      	OUT  0x1A,R30
                 ; 0001 0102      DDRD = 0x0F;
000081 e0ef      	LDI  R30,LOW(15)
000082 bbe1      	OUT  0x11,R30
                 ; 0001 0103      DDRC = 0xFF;
000083 efef      	LDI  R30,LOW(255)
000084 bbe4      	OUT  0x14,R30
                 ; 0001 0104      count = 0;
000085 e0e0      	LDI  R30,LOW(0)
000086 93e0 0160 	STS  _count,R30
000088 93e0 0161 	STS  _count+1,R30
                 ; 0001 0105      temp = 0;
                +
00008a e000     +LDI R16 , LOW ( 0 )
00008b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0001 0106 
                 ; 0001 0107      fourthSevenSeg = 0;
00008c 83ee      	STD  Y+6,R30
00008d 83ef      	STD  Y+6+1,R30
                 ; 0001 0108      thirdSevenSeg = PINA%10;
00008e b3e9      	IN   R30,0x19
00008f e0f0      	LDI  R31,0
000090 01df      	MOVW R26,R30
000091 d077      	RCALL SUBOPT_0x0
000092 87e8      	STD  Y+8,R30
000093 87f9      	STD  Y+8+1,R31
                 ; 0001 0109      temp = PINA/10;
000094 b3e9      	IN   R30,0x19
000095 e0f0      	LDI  R31,0
000096 01df      	MOVW R26,R30
000097 d076      	RCALL SUBOPT_0x1
                 ; 0001 010A      secondSevenSeg = temp%10;
000098 01af      	MOVW R20,R30
                 ; 0001 010B      temp = temp/10;
000099 01d8      	MOVW R26,R16
00009a d073      	RCALL SUBOPT_0x1
                 ; 0001 010C      firstSevenSeg = temp%10;
00009b 019f      	MOVW R18,R30
                 ; 0001 010D 
                 ; 0001 010E      while(1) {
                 _0x20048:
                 ; 0001 010F 
                 ; 0001 0110          PORTC = sevenSeg[fourthSevenSeg];
00009c 81ee      	LDD  R30,Y+6
00009d 81ff      	LDD  R31,Y+6+1
00009e d076      	RCALL SUBOPT_0x2
00009f d07d      	RCALL SUBOPT_0x3
                 ; 0001 0111          delay_ms(4);
                 ; 0001 0112          PORTD = 0x08;
0000a0 e0e8      	LDI  R30,LOW(8)
0000a1 bbe2      	OUT  0x12,R30
                 ; 0001 0113          PORTC = sevenSeg[thirdSevenSeg]+0x80 ;
0000a2 85e8      	LDD  R30,Y+8
0000a3 85f9      	LDD  R31,Y+8+1
0000a4 d070      	RCALL SUBOPT_0x2
0000a5 58e0      	SUBI R30,-LOW(128)
0000a6 d076      	RCALL SUBOPT_0x3
                 ; 0001 0114          delay_ms(4);
                 ; 0001 0115          PORTD = 0x04;
0000a7 e0e4      	LDI  R30,LOW(4)
0000a8 bbe2      	OUT  0x12,R30
                 ; 0001 0116          PORTC = sevenSeg[secondSevenSeg];
0000a9 01fa      	MOVW R30,R20
0000aa d06a      	RCALL SUBOPT_0x2
0000ab d071      	RCALL SUBOPT_0x3
                 ; 0001 0117          delay_ms(4);
                 ; 0001 0118          PORTD = 0x02;
0000ac e0e2      	LDI  R30,LOW(2)
0000ad bbe2      	OUT  0x12,R30
                 ; 0001 0119          PORTC = sevenSeg[firstSevenSeg];
0000ae 01f9      	MOVW R30,R18
0000af d065      	RCALL SUBOPT_0x2
0000b0 d06c      	RCALL SUBOPT_0x3
                 ; 0001 011A          delay_ms(4);
                 ; 0001 011B          PORTD = 0x01;
0000b1 e0e1      	LDI  R30,LOW(1)
0000b2 bbe2      	OUT  0x12,R30
                 ; 0001 011C 
                 ; 0001 011D          count += 1;
0000b3 91e0 0160 	LDS  R30,_count
0000b5 91f0 0161 	LDS  R31,_count+1
0000b7 9631      	ADIW R30,1
0000b8 93e0 0160 	STS  _count,R30
0000ba 93f0 0161 	STS  _count+1,R31
                 ; 0001 011E          if (count == 15) {
0000bc 91a0 0160 	LDS  R26,_count
0000be 91b0 0161 	LDS  R27,_count+1
0000c0 971f      	SBIW R26,15
0000c1 f581      	BRNE _0x2004B
                 ; 0001 011F             if (fourthSevenSeg == 0){
0000c2 81ee      	LDD  R30,Y+6
0000c3 81ff      	LDD  R31,Y+6+1
0000c4 9730      	SBIW R30,0
0000c5 f4f9      	BRNE _0x2004C
                 ; 0001 0120                  fourthSevenSeg = 10;
0000c6 e0ea      	LDI  R30,LOW(10)
0000c7 e0f0      	LDI  R31,HIGH(10)
0000c8 83ee      	STD  Y+6,R30
0000c9 83ff      	STD  Y+6+1,R31
                 ; 0001 0121                  if (thirdSevenSeg == 0){
0000ca 85e8      	LDD  R30,Y+8
0000cb 85f9      	LDD  R31,Y+8+1
0000cc 9730      	SBIW R30,0
0000cd f491      	BRNE _0x2004D
                 ; 0001 0122                     thirdSevenSeg = 9;
0000ce e0e9      	LDI  R30,LOW(9)
0000cf e0f0      	LDI  R31,HIGH(9)
0000d0 87e8      	STD  Y+8,R30
0000d1 87f9      	STD  Y+8+1,R31
                 ; 0001 0123                     if (secondSevenSeg == 0){
0000d2 2e04      	MOV  R0,R20
0000d3 2a05      	OR   R0,R21
0000d4 f441      	BRNE _0x2004E
                 ; 0001 0124                         secondSevenSeg = 9;
                +
0000d5 e049     +LDI R20 , LOW ( 9 )
0000d6 e050     +LDI R21 , HIGH ( 9 )
                 	__GETWRN 20,21,9
                 ; 0001 0125                         if (firstSevenSeg != 0) firstSevenSeg --;
0000d7 2e02      	MOV  R0,R18
0000d8 2a03      	OR   R0,R19
0000d9 f011      	BREQ _0x2004F
                +
0000da 5021     +SUBI R18 , LOW ( 1 )
0000db 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0001 0126                     }
                 _0x2004F:
                 ; 0001 0127                     else secondSevenSeg --;
0000dc c002      	RJMP _0x20050
                 _0x2004E:
                +
0000dd 5041     +SUBI R20 , LOW ( 1 )
0000de 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
                 ; 0001 0128                  }
                 _0x20050:
                 ; 0001 0129                  else thirdSevenSeg --;
0000df c005      	RJMP _0x20051
                 _0x2004D:
0000e0 85e8      	LDD  R30,Y+8
0000e1 85f9      	LDD  R31,Y+8+1
0000e2 9731      	SBIW R30,1
0000e3 87e8      	STD  Y+8,R30
0000e4 87f9      	STD  Y+8+1,R31
                 ; 0001 012A             }
                 _0x20051:
                 ; 0001 012B 
                 ; 0001 012C             fourthSevenSeg -= amountOfReduction;
                 _0x2004C:
0000e5 85aa      	LDD  R26,Y+10
0000e6 85bb      	LDD  R27,Y+10+1
0000e7 81ee      	LDD  R30,Y+6
0000e8 81ff      	LDD  R31,Y+6+1
0000e9 1bea      	SUB  R30,R26
0000ea 0bfb      	SBC  R31,R27
0000eb 83ee      	STD  Y+6,R30
0000ec 83ff      	STD  Y+6+1,R31
                 ; 0001 012D             count = 0;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee 93e0 0160 	STS  _count,R30
0000f0 93e0 0161 	STS  _count+1,R30
                 ; 0001 012E          }
                 ; 0001 012F 
                 ; 0001 0130          if (fourthSevenSeg == 0 && thirdSevenSeg == 0 && secondSevenSeg == 0&& firstSevenSeg == 0) break;
                 _0x2004B:
0000f2 81ae      	LDD  R26,Y+6
0000f3 81bf      	LDD  R27,Y+6+1
0000f4 9710      	SBIW R26,0
0000f5 f461      	BRNE _0x20053
0000f6 85a8      	LDD  R26,Y+8
0000f7 85b9      	LDD  R27,Y+8+1
0000f8 9710      	SBIW R26,0
0000f9 f441      	BRNE _0x20053
0000fa 2400      	CLR  R0
0000fb 1604      	CP   R0,R20
0000fc 0605      	CPC  R0,R21
0000fd f421      	BRNE _0x20053
0000fe 2400      	CLR  R0
0000ff 1602      	CP   R0,R18
000100 0603      	CPC  R0,R19
000101 f009      	BREQ _0x20054
                 _0x20053:
000102 c001      	RJMP _0x20052
                 _0x20054:
000103 c001      	RJMP _0x2004A
                 ; 0001 0131      }
                 _0x20052:
000104 cf97      	RJMP _0x20048
                 _0x2004A:
                 ; 0001 0132 }
000105 940e 016b 	CALL __LOADLOCR6
000107 962c      	ADIW R28,12
000108 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _count:
000160           	.BYTE 0x2
                 _sevenSeg:
000162           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000109 e0ea      	LDI  R30,LOW(10)
00010a e0f0      	LDI  R31,HIGH(10)
00010b 940e 0148 	CALL __MODW21
00010d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00010e e0ea      	LDI  R30,LOW(10)
00010f e0f0      	LDI  R31,HIGH(10)
000110 940e 0143 	CALL __DIVW21
000112 018f      	MOVW R16,R30
000113 01d8      	MOVW R26,R16
000114 cff4      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
000115 e6a2      	LDI  R26,LOW(_sevenSeg)
000116 e0b1      	LDI  R27,HIGH(_sevenSeg)
000117 0fee      	LSL  R30
000118 1fff      	ROL  R31
000119 0fae      	ADD  R26,R30
00011a 1fbf      	ADC  R27,R31
00011b 91ec      	LD   R30,X
00011c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00011d bbe5      	OUT  0x15,R30
00011e e0a4      	LDI  R26,LOW(4)
00011f e0b0      	LDI  R27,0
000120 940c 0122 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000122 9610      	adiw r26,0
000123 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000124 ed80     +LDI R24 , LOW ( 0x7D0 )
000125 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000126 9701     +SBIW R24 , 1
000127 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000128 95a8      	wdr
000129 9711      	sbiw r26,1
00012a f7c9      	brne __delay_ms0
                 __delay_ms1:
00012b 9508      	ret
                 
                 __ANEGW1:
00012c 95f1      	NEG  R31
00012d 95e1      	NEG  R30
00012e 40f0      	SBCI R31,0
00012f 9508      	RET
                 
                 __DIVW21U:
000130 2400      	CLR  R0
000131 2411      	CLR  R1
000132 e190      	LDI  R25,16
                 __DIVW21U1:
000133 0faa      	LSL  R26
000134 1fbb      	ROL  R27
000135 1c00      	ROL  R0
000136 1c11      	ROL  R1
000137 1a0e      	SUB  R0,R30
000138 0a1f      	SBC  R1,R31
000139 f418      	BRCC __DIVW21U2
00013a 0e0e      	ADD  R0,R30
00013b 1e1f      	ADC  R1,R31
00013c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00013d 60a1      	SBR  R26,1
                 __DIVW21U3:
00013e 959a      	DEC  R25
00013f f799      	BRNE __DIVW21U1
000140 01fd      	MOVW R30,R26
000141 01d0      	MOVW R26,R0
000142 9508      	RET
                 
                 __DIVW21:
000143 d012      	RCALL __CHKSIGNW
000144 dfeb      	RCALL __DIVW21U
000145 f40e      	BRTC __DIVW211
000146 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000147 9508      	RET
                 
                 __MODW21:
000148 94e8      	CLT
000149 ffb7      	SBRS R27,7
00014a c004      	RJMP __MODW211
00014b 95a0      	COM  R26
00014c 95b0      	COM  R27
00014d 9611      	ADIW R26,1
00014e 9468      	SET
                 __MODW211:
00014f fdf7      	SBRC R31,7
000150 dfdb      	RCALL __ANEGW1
000151 dfde      	RCALL __DIVW21U
000152 01fd      	MOVW R30,R26
000153 f40e      	BRTC __MODW212
000154 dfd7      	RCALL __ANEGW1
                 __MODW212:
000155 9508      	RET
                 
                 __CHKSIGNW:
000156 94e8      	CLT
000157 fff7      	SBRS R31,7
000158 c002      	RJMP __CHKSW1
000159 dfd2      	RCALL __ANEGW1
00015a 9468      	SET
                 __CHKSW1:
00015b ffb7      	SBRS R27,7
00015c c006      	RJMP __CHKSW2
00015d 95a0      	COM  R26
00015e 95b0      	COM  R27
00015f 9611      	ADIW R26,1
000160 f800      	BLD  R0,0
000161 9403      	INC  R0
000162 fa00      	BST  R0,0
                 __CHKSW2:
000163 9508      	RET
                 
                 __SAVELOCR6:
000164 935a      	ST   -Y,R21
                 __SAVELOCR5:
000165 934a      	ST   -Y,R20
                 __SAVELOCR4:
000166 933a      	ST   -Y,R19
                 __SAVELOCR3:
000167 932a      	ST   -Y,R18
                 __SAVELOCR2:
000168 931a      	ST   -Y,R17
000169 930a      	ST   -Y,R16
00016a 9508      	RET
                 
                 __LOADLOCR6:
00016b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00016c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00016d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00016e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00016f 8119      	LDD  R17,Y+1
000170 8108      	LD   R16,Y
000171 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  22 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:   3 r18:   7 r19:   5 r20:   8 r21:   6 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  37 r27:  20 r28:   3 r29:   1 r30:  79 r31:  33 
x  :   4 y  :  52 z  :   7 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   5 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   4 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   2 cpc   :   2 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  23 ld    :   2 ldd   :  29 ldi   :  46 
lds   :   4 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   2 movw  :  15 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   0 out   :  14 pop   :   0 push  :   0 rcall :  19 ret   :  11 
reti  :   0 rjmp  :  13 rol   :   4 ror   :   0 sbc   :   2 sbci  :   3 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  15 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  11 std   :  14 sts   :   6 sub   :   2 subi  :   3 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002e4    712     28    740   16384   4.5%
[.dseg] 0x000060 0x000176      0     22     22    1024   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
