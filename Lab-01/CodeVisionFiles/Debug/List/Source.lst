
AVRASM ver. 2.1.30  C:\cvavr\BIN\Lab01\Debug\List\Source.asm Thu Oct 01 12:00:25 2020

C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _temp=R6
                 	.DEF _temp_msb=R7
                 	.DEF _firstSevenSeg=R8
                 	.DEF _firstSevenSeg_msb=R9
                 	.DEF _secondSevenSeg=R10
                 	.DEF _secondSevenSeg_msb=R11
                 	.DEF _thirdSevenSeg=R12
                 	.DEF _thirdSevenSeg_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0
00002e 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002f 003f
000030 0006
000031 005b
000032 004f      	.DB  0x3F,0x0,0x6,0x0,0x5B,0x0,0x4F,0x0
000033 0066
000034 006d
000035 007d
000036 0007      	.DB  0x66,0x0,0x6D,0x0,0x7D,0x0,0x7,0x0
000037 007f
C:\cvavr\BIN\Lab01\Debug\List\Source.asm(1137): warning: .cseg .db misalignment - padding zero byte
000038 006f      	.DB  0x7F,0x0,0x6F
                 
                 __GLOBAL_INI_TBL:
000039 000a      	.DW  0x0A
00003a 0004      	.DW  0x04
00003b 0054      	.DW  __REG_VARS*2
                 
00003c 0013      	.DW  0x13
00003d 0162      	.DW  _sevenSeg
00003e 005e      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bffb      	OUT  GICR,R31
000045 bfeb      	OUT  GICR,R30
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000047 e08d      	LDI  R24,(14-2)+1
000048 e0a2      	LDI  R26,2
000049 27bb      	CLR  R27
                 __CLEAR_REG:
00004a 93ed      	ST   X+,R30
00004b 958a      	DEC  R24
00004c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000050 93ed      	ST   X+,R30
000051 9701      	SBIW R24,1
000052 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000053 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000054 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000055 9185      	LPM  R24,Z+
000056 9195      	LPM  R25,Z+
000057 9700      	SBIW R24,0
000058 f061      	BREQ __GLOBAL_INI_END
000059 91a5      	LPM  R26,Z+
00005a 91b5      	LPM  R27,Z+
00005b 9005      	LPM  R0,Z+
00005c 9015      	LPM  R1,Z+
00005d 01bf      	MOVW R22,R30
00005e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005f 9005      	LPM  R0,Z+
000060 920d      	ST   X+,R0
000061 9701      	SBIW R24,1
000062 f7e1      	BRNE __GLOBAL_INI_LOOP
000063 01fb      	MOVW R30,R22
000064 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000065 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000066 bfed      	OUT  SPL,R30
000067 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000068 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000069 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006b 940c 006d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * Source.c
                 ; *
                 ; * Created: 9/30/2020 3:42:41 PM
                 ; * Author: Arman Riasi
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;void question_01();
                 ;void question_02();
                 ;void question_03();
                 ;void question_04();
                 ;void question_05();
                 ;void question_06();
                 ;
                 ;
                 ;int count = 0;
                 ;int temp = 0;
                 ;unsigned int firstSevenSeg = 0;
                 ;unsigned int secondSevenSeg = 0;
                 ;unsigned int thirdSevenSeg = 0;
                 ;unsigned int fourthSevenSeg = 0;
                 ;unsigned int sevenSeg[] = {
                 ;    0b00111111, //showing number 0 on 7_seg
                 ;    0b00000110, //showing number 1 on 7_seg
                 ;    0b01011011, //showing number 2 on 7_seg
                 ;    0b01001111, //showing number 3 on 7_seg
                 ;    0b01100110, //showing number 4 on 7_seg
                 ;    0b01101101, //showing number 5 on 7_seg
                 ;    0b01111101, //showing number 6 on 7_seg
                 ;    0b00000111, //showing number 7 on 7_seg
                 ;    0b01111111, //showing number 8 on 7_seg
                 ;    0b01101111, //showing number 9 on 7_seg
                 ;};
                 
                 	.DSEG
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0029     //question_01(); //calling question one
                 ; 0000 002A     //question_02(); //calling question two
                 ; 0000 002B     //question_03(); //calling question three
                 ; 0000 002C     //question_04(); //calling question four
                 ; 0000 002D     //question_05(); //calling question five
                 ; 0000 002E     //question_06(); //calling question six
                 ; 0000 002F 
                 ; 0000 0030     //////////quetion seven:
                 ; 0000 0031     question_01();
00006d d007      	RCALL _question_01
                 ; 0000 0032     question_02();
00006e d01a      	RCALL _question_02
                 ; 0000 0033     question_04();
00006f d077      	RCALL _question_04
                 ; 0000 0034     while(1){
                 _0x4:
                 ; 0000 0035         question_03();
000070 d03f      	RCALL _question_03
                 ; 0000 0036         question_05();
000071 d08a      	RCALL _question_05
                 ; 0000 0037         question_06();
000072 d0cf      	RCALL _question_06
                 ; 0000 0038     }
000073 cffc      	RJMP _0x4
                 ; 0000 0039 
                 ; 0000 003A }
                 _0x7:
000074 cfff      	RJMP _0x7
                 ; .FEND
                 ;
                 ;
                 ;void question_01(){
                 ; 0000 003D void question_01(){
                 _question_01:
                 ; .FSTART _question_01
                 ; 0000 003E     DDRB = 0xFF;
000075 efef      	LDI  R30,LOW(255)
000076 bbe7      	OUT  0x17,R30
                 ; 0000 003F     count = 0;
000077 2444      	CLR  R4
000078 2455      	CLR  R5
                 ; 0000 0040     while(count <4){
                 _0x8:
000079 e0e4      	LDI  R30,LOW(4)
00007a e0f0      	LDI  R31,HIGH(4)
00007b 164e      	CP   R4,R30
00007c 065f      	CPC  R5,R31
00007d f454      	BRGE _0xA
                 ; 0000 0041     PORTB = 0xFF;
00007e efef      	LDI  R30,LOW(255)
00007f bbe8      	OUT  0x18,R30
                 ; 0000 0042     delay_ms(500); //calling 500ms delay == 0.5 second
000080 d11a      	RCALL SUBOPT_0x0
                 ; 0000 0043     PORTB = 0x00;
000081 e0e0      	LDI  R30,LOW(0)
000082 bbe8      	OUT  0x18,R30
                 ; 0000 0044     delay_ms(500); //calling 500ms delay == 0.5 second
000083 d117      	RCALL SUBOPT_0x0
                 ; 0000 0045     count++;
000084 01f2      	MOVW R30,R4
000085 9631      	ADIW R30,1
000086 012f      	MOVW R4,R30
                 ; 0000 0046     }
000087 cff1      	RJMP _0x8
                 _0xA:
                 ; 0000 0047 
                 ; 0000 0048 }
000088 9508      	RET
                 ; .FEND
                 ;
                 ;void question_02(){
                 ; 0000 004A void question_02(){
                 _question_02:
                 ; .FSTART _question_02
                 ; 0000 004B     DDRB = 0xFF;
000089 efef      	LDI  R30,LOW(255)
00008a bbe7      	OUT  0x17,R30
                 ; 0000 004C     count = 0;
00008b 2444      	CLR  R4
00008c 2455      	CLR  R5
                 ; 0000 004D     while(count <2){    //Changing the point of light each 0.5 second, Then after 8 seconds it will stop
                 _0xB:
00008d e0e2      	LDI  R30,LOW(2)
00008e e0f0      	LDI  R31,HIGH(2)
00008f 164e      	CP   R4,R30
000090 065f      	CPC  R5,R31
000091 f4e4      	BRGE _0xD
                 ; 0000 004E     PORTB.7 = 0;
000092 98c7      	CBI  0x18,7
                 ; 0000 004F     PORTB.0 = 1;
000093 9ac0      	SBI  0x18,0
                 ; 0000 0050     delay_ms(500);
000094 d106      	RCALL SUBOPT_0x0
                 ; 0000 0051     PORTB.0 = 0;
000095 98c0      	CBI  0x18,0
                 ; 0000 0052     PORTB.1 = 1;
000096 9ac1      	SBI  0x18,1
                 ; 0000 0053     delay_ms(500);
000097 d103      	RCALL SUBOPT_0x0
                 ; 0000 0054     PORTB.1 = 0;
000098 98c1      	CBI  0x18,1
                 ; 0000 0055     PORTB.2 = 1;
000099 9ac2      	SBI  0x18,2
                 ; 0000 0056     delay_ms(500);
00009a d100      	RCALL SUBOPT_0x0
                 ; 0000 0057     PORTB.2 = 0;
00009b 98c2      	CBI  0x18,2
                 ; 0000 0058     PORTB.3 = 1;
00009c 9ac3      	SBI  0x18,3
                 ; 0000 0059     delay_ms(500);
00009d d0fd      	RCALL SUBOPT_0x0
                 ; 0000 005A     PORTB.3 = 0;
00009e 98c3      	CBI  0x18,3
                 ; 0000 005B     PORTB.4 = 1;
00009f 9ac4      	SBI  0x18,4
                 ; 0000 005C     delay_ms(500);
0000a0 d0fa      	RCALL SUBOPT_0x0
                 ; 0000 005D     PORTB.4 = 0;
0000a1 98c4      	CBI  0x18,4
                 ; 0000 005E     PORTB.5 = 1;
0000a2 9ac5      	SBI  0x18,5
                 ; 0000 005F     delay_ms(500);
0000a3 d0f7      	RCALL SUBOPT_0x0
                 ; 0000 0060     PORTB.5 = 0;
0000a4 98c5      	CBI  0x18,5
                 ; 0000 0061     PORTB.6 = 1;
0000a5 9ac6      	SBI  0x18,6
                 ; 0000 0062     delay_ms(500);
0000a6 d0f4      	RCALL SUBOPT_0x0
                 ; 0000 0063     PORTB.6 = 0;
0000a7 98c6      	CBI  0x18,6
                 ; 0000 0064     PORTB.7 = 1;
0000a8 9ac7      	SBI  0x18,7
                 ; 0000 0065     delay_ms(500);
0000a9 d0f1      	RCALL SUBOPT_0x0
                 ; 0000 0066     count++;
0000aa 01f2      	MOVW R30,R4
0000ab 9631      	ADIW R30,1
0000ac 012f      	MOVW R4,R30
                 ; 0000 0067     }
0000ad cfdf      	RJMP _0xB
                 _0xD:
                 ; 0000 0068 
                 ; 0000 0069     PORTB.7 = 0;
0000ae 98c7      	CBI  0x18,7
                 ; 0000 006A 
                 ; 0000 006B }
0000af 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void question_03(){
                 ; 0000 006E void question_03(){
                 _question_03:
                 ; .FSTART _question_03
                 ; 0000 006F 
                 ; 0000 0070     count = 0;
0000b0 2444      	CLR  R4
0000b1 2455      	CLR  R5
                 ; 0000 0071     while(1){
                 _0x30:
                 ; 0000 0072      DDRA = 0x00;
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bbea      	OUT  0x1A,R30
                 ; 0000 0073      DDRB = 0xFF;
0000b4 efef      	LDI  R30,LOW(255)
0000b5 bbe7      	OUT  0x17,R30
                 ; 0000 0074 
                 ; 0000 0075     PORTB.0 = PINA.0;
0000b6 99c8      	SBIC 0x19,0
0000b7 c002      	RJMP _0x33
0000b8 98c0      	CBI  0x18,0
0000b9 c001      	RJMP _0x34
                 _0x33:
0000ba 9ac0      	SBI  0x18,0
                 _0x34:
                 ; 0000 0076     PORTB.1 = PINA.1;
0000bb 99c9      	SBIC 0x19,1
0000bc c002      	RJMP _0x35
0000bd 98c1      	CBI  0x18,1
0000be c001      	RJMP _0x36
                 _0x35:
0000bf 9ac1      	SBI  0x18,1
                 _0x36:
                 ; 0000 0077     PORTB.2 = PINA.2;
0000c0 99ca      	SBIC 0x19,2
0000c1 c002      	RJMP _0x37
0000c2 98c2      	CBI  0x18,2
0000c3 c001      	RJMP _0x38
                 _0x37:
0000c4 9ac2      	SBI  0x18,2
                 _0x38:
                 ; 0000 0078     PORTB.3 = PINA.3;
0000c5 99cb      	SBIC 0x19,3
0000c6 c002      	RJMP _0x39
0000c7 98c3      	CBI  0x18,3
0000c8 c001      	RJMP _0x3A
                 _0x39:
0000c9 9ac3      	SBI  0x18,3
                 _0x3A:
                 ; 0000 0079     PORTB.4 = PINA.4;
0000ca 99cc      	SBIC 0x19,4
0000cb c002      	RJMP _0x3B
0000cc 98c4      	CBI  0x18,4
0000cd c001      	RJMP _0x3C
                 _0x3B:
0000ce 9ac4      	SBI  0x18,4
                 _0x3C:
                 ; 0000 007A     PORTB.5 = PINA.5;
0000cf 99cd      	SBIC 0x19,5
0000d0 c002      	RJMP _0x3D
0000d1 98c5      	CBI  0x18,5
0000d2 c001      	RJMP _0x3E
                 _0x3D:
0000d3 9ac5      	SBI  0x18,5
                 _0x3E:
                 ; 0000 007B     PORTB.6 = PINA.6;
0000d4 99ce      	SBIC 0x19,6
0000d5 c002      	RJMP _0x3F
0000d6 98c6      	CBI  0x18,6
0000d7 c001      	RJMP _0x40
                 _0x3F:
0000d8 9ac6      	SBI  0x18,6
                 _0x40:
                 ; 0000 007C     PORTB.7 = PINA.7;
0000d9 99cf      	SBIC 0x19,7
0000da c002      	RJMP _0x41
0000db 98c7      	CBI  0x18,7
0000dc c001      	RJMP _0x42
                 _0x41:
0000dd 9ac7      	SBI  0x18,7
                 _0x42:
                 ; 0000 007D 
                 ; 0000 007E     count ++;
0000de 01f2      	MOVW R30,R4
0000df 9631      	ADIW R30,1
0000e0 012f      	MOVW R4,R30
                 ; 0000 007F 
                 ; 0000 0080     if (count == 50) break;
0000e1 e3e2      	LDI  R30,LOW(50)
0000e2 e0f0      	LDI  R31,HIGH(50)
0000e3 15e4      	CP   R30,R4
0000e4 05f5      	CPC  R31,R5
0000e5 f661      	BRNE _0x30
                 ; 0000 0081     }
                 ; 0000 0082 
                 ; 0000 0083 }
0000e6 9508      	RET
                 ; .FEND
                 ;
                 ;void question_04(){
                 ; 0000 0085 void question_04(){
                 _question_04:
                 ; .FSTART _question_04
                 ; 0000 0086     DDRD = 0x0F;
0000e7 d0b7      	RCALL SUBOPT_0x1
                 ; 0000 0087     DDRC = 0xFF;
                 ; 0000 0088 
                 ; 0000 0089 
                 ; 0000 008A     PORTD = 0x00;
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 bbe2      	OUT  0x12,R30
                 ; 0000 008B 
                 ; 0000 008C 
                 ; 0000 008D     for (count = 9; count >= 0; count--){
0000ea e0e9      	LDI  R30,LOW(9)
0000eb e0f0      	LDI  R31,HIGH(9)
0000ec 012f      	MOVW R4,R30
                 _0x45:
0000ed 2400      	CLR  R0
0000ee 1440      	CP   R4,R0
0000ef 0450      	CPC  R5,R0
0000f0 f054      	BRLT _0x46
                 ; 0000 008E      PORTC = sevenSeg[count];
0000f1 01f2      	MOVW R30,R4
0000f2 d0b1      	RCALL SUBOPT_0x2
                 ; 0000 008F      delay_ms(1000);
0000f3 eea8      	LDI  R26,LOW(1000)
0000f4 e0b3      	LDI  R27,HIGH(1000)
0000f5 940e 020e 	CALL _delay_ms
                 ; 0000 0090     }
0000f7 01f2      	MOVW R30,R4
0000f8 9731      	SBIW R30,1
0000f9 012f      	MOVW R4,R30
0000fa cff2      	RJMP _0x45
                 _0x46:
                 ; 0000 0091 
                 ; 0000 0092 
                 ; 0000 0093 }
0000fb 9508      	RET
                 ; .FEND
                 ;
                 ;void question_05() {
                 ; 0000 0095 void question_05() {
                 _question_05:
                 ; .FSTART _question_05
                 ; 0000 0096      DDRA = 0x00;
0000fc d0b0      	RCALL SUBOPT_0x3
                 ; 0000 0097      temp = 0;
                 ; 0000 0098      DDRD = 0x0F;
                 ; 0000 0099      DDRC = 0xFF;
                 ; 0000 009A      count = 0;
0000fd d0b4      	RCALL SUBOPT_0x4
                 ; 0000 009B 
                 ; 0000 009C 
                 ; 0000 009D      fourthSevenSeg = 0;
                 ; 0000 009E      thirdSevenSeg = PINA%10;
                 ; 0000 009F      temp = PINA/10;
                 ; 0000 00A0      secondSevenSeg = temp%10;
                 ; 0000 00A1      temp = temp/10;
                 ; 0000 00A2      firstSevenSeg = temp%10;
                 ; 0000 00A3 
                 ; 0000 00A4      while(1) {
                 _0x47:
                 ; 0000 00A5 
                 ; 0000 00A6          PORTC = sevenSeg[fourthSevenSeg];
0000fe d0dd      	RCALL SUBOPT_0x5
0000ff d0a4      	RCALL SUBOPT_0x2
                 ; 0000 00A7          delay_ms(4);
000100 d0e0      	RCALL SUBOPT_0x6
                 ; 0000 00A8          PORTD = 0x08;
000101 d0e3      	RCALL SUBOPT_0x7
                 ; 0000 00A9          PORTC = sevenSeg[thirdSevenSeg]+0x80 ;
                 ; 0000 00AA          delay_ms(4);
                 ; 0000 00AB          PORTD = 0x04;
000102 e0e4      	LDI  R30,LOW(4)
000103 bbe2      	OUT  0x12,R30
                 ; 0000 00AC          PORTC = sevenSeg[secondSevenSeg];
000104 01f5      	MOVW R30,R10
000105 d09e      	RCALL SUBOPT_0x2
                 ; 0000 00AD          delay_ms(4);
000106 d0da      	RCALL SUBOPT_0x6
                 ; 0000 00AE          PORTD = 0x02;
000107 e0e2      	LDI  R30,LOW(2)
000108 bbe2      	OUT  0x12,R30
                 ; 0000 00AF          PORTC = sevenSeg[firstSevenSeg];
000109 01f4      	MOVW R30,R8
00010a d099      	RCALL SUBOPT_0x2
                 ; 0000 00B0          delay_ms(4);
00010b d0d5      	RCALL SUBOPT_0x6
                 ; 0000 00B1          PORTD = 0x01;
00010c d0e5      	RCALL SUBOPT_0x8
                 ; 0000 00B2 
                 ; 0000 00B3          count += 1;
                 ; 0000 00B4          if (count == 10) {
00010d f4f1      	BRNE _0x4A
                 ; 0000 00B5             if (fourthSevenSeg == 0){
00010e d0cd      	RCALL SUBOPT_0x5
00010f 9730      	SBIW R30,0
000110 f4d1      	BRNE _0x4B
                 ; 0000 00B6                  fourthSevenSeg = 10;
000111 d0ea      	RCALL SUBOPT_0x9
                 ; 0000 00B7                  if (thirdSevenSeg == 0){
000112 f4a1      	BRNE _0x4C
                 ; 0000 00B8                     thirdSevenSeg = 9;
000113 e0e9      	LDI  R30,LOW(9)
000114 e0f0      	LDI  R31,HIGH(9)
000115 016f      	MOVW R12,R30
                 ; 0000 00B9                     if (secondSevenSeg == 0){
000116 2c0a      	MOV  R0,R10
000117 280b      	OR   R0,R11
000118 f449      	BRNE _0x4D
                 ; 0000 00BA                         secondSevenSeg = 9;
000119 015f      	MOVW R10,R30
                 ; 0000 00BB                         if (firstSevenSeg != 0) firstSevenSeg --;
00011a 2c08      	MOV  R0,R8
00011b 2809      	OR   R0,R9
00011c f021      	BREQ _0x4E
00011d 01f4      	MOVW R30,R8
00011e 9731      	SBIW R30,1
00011f 014f      	MOVW R8,R30
000120 9631      	ADIW R30,1
                 ; 0000 00BC                     }
                 _0x4E:
                 ; 0000 00BD                     else secondSevenSeg --;
000121 c004      	RJMP _0x4F
                 _0x4D:
000122 01f5      	MOVW R30,R10
000123 9731      	SBIW R30,1
000124 015f      	MOVW R10,R30
000125 9631      	ADIW R30,1
                 ; 0000 00BE                  }
                 _0x4F:
                 ; 0000 00BF                  else thirdSevenSeg --;
000126 c004      	RJMP _0x50
                 _0x4C:
000127 01f6      	MOVW R30,R12
000128 9731      	SBIW R30,1
000129 016f      	MOVW R12,R30
00012a 9631      	ADIW R30,1
                 ; 0000 00C0             }
                 _0x50:
                 ; 0000 00C1             fourthSevenSeg -= 2;
                 _0x4B:
00012b d0d9      	RCALL SUBOPT_0xA
                 ; 0000 00C2             count = 0;
                 ; 0000 00C3          }
                 ; 0000 00C4 
                 ; 0000 00C5          if (fourthSevenSeg == 0 && thirdSevenSeg == 0 && secondSevenSeg == 0&& firstSevenSeg == 0) break;
                 _0x4A:
00012c 91a0 0160 	LDS  R26,_fourthSevenSeg
00012e 91b0 0161 	LDS  R27,_fourthSevenSeg+1
000130 9710      	SBIW R26,0
000131 f461      	BRNE _0x52
000132 2400      	CLR  R0
000133 140c      	CP   R0,R12
000134 040d      	CPC  R0,R13
000135 f441      	BRNE _0x52
000136 2400      	CLR  R0
000137 140a      	CP   R0,R10
000138 040b      	CPC  R0,R11
000139 f421      	BRNE _0x52
00013a 2400      	CLR  R0
00013b 1408      	CP   R0,R8
00013c 0409      	CPC  R0,R9
00013d f009      	BREQ _0x53
                 _0x52:
00013e c001      	RJMP _0x51
                 _0x53:
00013f c001      	RJMP _0x49
                 ; 0000 00C6      }
                 _0x51:
000140 cfbd      	RJMP _0x47
                 _0x49:
                 ; 0000 00C7 }
000141 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void question_06() {
                 ; 0000 00CA void question_06() {
                 _question_06:
                 ; .FSTART _question_06
                 ; 0000 00CB      DDRA = 0x00;
000142 d06a      	RCALL SUBOPT_0x3
                 ; 0000 00CC      temp = 0;
                 ; 0000 00CD      DDRD = 0x0F;
                 ; 0000 00CE      DDRC = 0xFF;
                 ; 0000 00CF      count = 0;
000143 d06e      	RCALL SUBOPT_0x4
                 ; 0000 00D0 
                 ; 0000 00D1      fourthSevenSeg = 0;
                 ; 0000 00D2      thirdSevenSeg = PINA%10;
                 ; 0000 00D3      temp = PINA/10;
                 ; 0000 00D4      secondSevenSeg = temp%10;
                 ; 0000 00D5      temp = temp/10;
                 ; 0000 00D6      firstSevenSeg = temp%10;
                 ; 0000 00D7 
                 ; 0000 00D8      while(1) {
                 _0x54:
                 ; 0000 00D9 
                 ; 0000 00DA          if (PIND.4 == 0) {
000144 9984      	SBIC 0x10,4
000145 c002      	RJMP _0x57
                 ; 0000 00DB              firstSevenSeg = 0;
000146 2488      	CLR  R8
000147 2499      	CLR  R9
                 ; 0000 00DC          }
                 ; 0000 00DD          if (PIND.5 == 0) {
                 _0x57:
000148 9985      	SBIC 0x10,5
000149 c002      	RJMP _0x58
                 ; 0000 00DE              secondSevenSeg = 0;
00014a 24aa      	CLR  R10
00014b 24bb      	CLR  R11
                 ; 0000 00DF          }
                 ; 0000 00E0          if (PIND.6 == 0) {
                 _0x58:
00014c 9986      	SBIC 0x10,6
00014d c002      	RJMP _0x59
                 ; 0000 00E1              thirdSevenSeg = 0;
00014e 24cc      	CLR  R12
00014f 24dd      	CLR  R13
                 ; 0000 00E2          }
                 ; 0000 00E3          if (PIND.7 == 0) {
                 _0x59:
000150 9987      	SBIC 0x10,7
000151 c005      	RJMP _0x5A
                 ; 0000 00E4              fourthSevenSeg = 0;
000152 e0e0      	LDI  R30,LOW(0)
000153 93e0 0160 	STS  _fourthSevenSeg,R30
000155 93e0 0161 	STS  _fourthSevenSeg+1,R30
                 ; 0000 00E5          }
                 ; 0000 00E6 
                 ; 0000 00E7 
                 ; 0000 00E8          PORTC = sevenSeg[fourthSevenSeg];
                 _0x5A:
000157 d084      	RCALL SUBOPT_0x5
000158 d04b      	RCALL SUBOPT_0x2
                 ; 0000 00E9          delay_ms(4);
000159 d087      	RCALL SUBOPT_0x6
                 ; 0000 00EA          PORTD = 0x08;
00015a d08a      	RCALL SUBOPT_0x7
                 ; 0000 00EB          PORTC = sevenSeg[thirdSevenSeg]+0x80 ;
                 ; 0000 00EC          delay_ms(4);
                 ; 0000 00ED          PORTD = 0x04;
00015b e0e4      	LDI  R30,LOW(4)
00015c bbe2      	OUT  0x12,R30
                 ; 0000 00EE          PORTC = sevenSeg[secondSevenSeg];
00015d 01f5      	MOVW R30,R10
00015e d045      	RCALL SUBOPT_0x2
                 ; 0000 00EF          delay_ms(4);
00015f d081      	RCALL SUBOPT_0x6
                 ; 0000 00F0          PORTD = 0x02;
000160 e0e2      	LDI  R30,LOW(2)
000161 bbe2      	OUT  0x12,R30
                 ; 0000 00F1          PORTC = sevenSeg[firstSevenSeg];
000162 01f4      	MOVW R30,R8
000163 d040      	RCALL SUBOPT_0x2
                 ; 0000 00F2          delay_ms(4);
000164 d07c      	RCALL SUBOPT_0x6
                 ; 0000 00F3          PORTD = 0x01;
000165 d08c      	RCALL SUBOPT_0x8
                 ; 0000 00F4 
                 ; 0000 00F5          count += 1;
                 ; 0000 00F6          if (count == 10) {
000166 f4f1      	BRNE _0x5B
                 ; 0000 00F7             if (fourthSevenSeg == 0){
000167 d074      	RCALL SUBOPT_0x5
000168 9730      	SBIW R30,0
000169 f4d1      	BRNE _0x5C
                 ; 0000 00F8                  fourthSevenSeg = 10;
00016a d091      	RCALL SUBOPT_0x9
                 ; 0000 00F9                  if (thirdSevenSeg == 0){
00016b f4a1      	BRNE _0x5D
                 ; 0000 00FA                     thirdSevenSeg = 9;
00016c e0e9      	LDI  R30,LOW(9)
00016d e0f0      	LDI  R31,HIGH(9)
00016e 016f      	MOVW R12,R30
                 ; 0000 00FB                     if (secondSevenSeg == 0){
00016f 2c0a      	MOV  R0,R10
000170 280b      	OR   R0,R11
000171 f449      	BRNE _0x5E
                 ; 0000 00FC                         secondSevenSeg = 9;
000172 015f      	MOVW R10,R30
                 ; 0000 00FD                         if (firstSevenSeg != 0) firstSevenSeg --;
000173 2c08      	MOV  R0,R8
000174 2809      	OR   R0,R9
000175 f021      	BREQ _0x5F
000176 01f4      	MOVW R30,R8
000177 9731      	SBIW R30,1
000178 014f      	MOVW R8,R30
000179 9631      	ADIW R30,1
                 ; 0000 00FE                     }
                 _0x5F:
                 ; 0000 00FF                     else secondSevenSeg --;
00017a c004      	RJMP _0x60
                 _0x5E:
00017b 01f5      	MOVW R30,R10
00017c 9731      	SBIW R30,1
00017d 015f      	MOVW R10,R30
00017e 9631      	ADIW R30,1
                 ; 0000 0100                  }
                 _0x60:
                 ; 0000 0101                  else thirdSevenSeg --;
00017f c004      	RJMP _0x61
                 _0x5D:
000180 01f6      	MOVW R30,R12
000181 9731      	SBIW R30,1
000182 016f      	MOVW R12,R30
000183 9631      	ADIW R30,1
                 ; 0000 0102             }
                 _0x61:
                 ; 0000 0103             fourthSevenSeg -= 2;
                 _0x5C:
000184 d080      	RCALL SUBOPT_0xA
                 ; 0000 0104             count = 0;
                 ; 0000 0105          }
                 ; 0000 0106 
                 ; 0000 0107          if (fourthSevenSeg == 0 && thirdSevenSeg == 0 && secondSevenSeg == 0&& firstSevenSeg == 0) break;
                 _0x5B:
000185 91a0 0160 	LDS  R26,_fourthSevenSeg
000187 91b0 0161 	LDS  R27,_fourthSevenSeg+1
000189 9710      	SBIW R26,0
00018a f461      	BRNE _0x63
00018b 2400      	CLR  R0
00018c 140c      	CP   R0,R12
00018d 040d      	CPC  R0,R13
00018e f441      	BRNE _0x63
00018f 2400      	CLR  R0
000190 140a      	CP   R0,R10
000191 040b      	CPC  R0,R11
000192 f421      	BRNE _0x63
000193 2400      	CLR  R0
000194 1408      	CP   R0,R8
000195 0409      	CPC  R0,R9
000196 f009      	BREQ _0x64
                 _0x63:
000197 c001      	RJMP _0x62
                 _0x64:
000198 c001      	RJMP _0x56
                 ; 0000 0108      }
                 _0x62:
000199 cfaa      	RJMP _0x54
                 _0x56:
                 ; 0000 0109 }
00019a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _fourthSevenSeg:
000160           	.BYTE 0x2
                 _sevenSeg:
000162           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x0:
00019b efa4      	LDI  R26,LOW(500)
00019c e0b1      	LDI  R27,HIGH(500)
00019d 940c 020e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00019f e0ef      	LDI  R30,LOW(15)
0001a0 bbe1      	OUT  0x11,R30
0001a1 efef      	LDI  R30,LOW(255)
0001a2 bbe4      	OUT  0x14,R30
0001a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x2:
0001a4 e6a2      	LDI  R26,LOW(_sevenSeg)
0001a5 e0b1      	LDI  R27,HIGH(_sevenSeg)
0001a6 0fee      	LSL  R30
0001a7 1fff      	ROL  R31
0001a8 0fae      	ADD  R26,R30
0001a9 1fbf      	ADC  R27,R31
0001aa 91ec      	LD   R30,X
0001ab bbe5      	OUT  0x15,R30
0001ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001ad e0e0      	LDI  R30,LOW(0)
0001ae bbea      	OUT  0x1A,R30
0001af 2466      	CLR  R6
0001b0 2477      	CLR  R7
0001b1 cfed      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:36 WORDS
                 SUBOPT_0x4:
0001b2 2444      	CLR  R4
0001b3 2455      	CLR  R5
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 93e0 0160 	STS  _fourthSevenSeg,R30
0001b7 93e0 0161 	STS  _fourthSevenSeg+1,R30
0001b9 b3e9      	IN   R30,0x19
0001ba e0f0      	LDI  R31,0
0001bb 01df      	MOVW R26,R30
0001bc e0ea      	LDI  R30,LOW(10)
0001bd e0f0      	LDI  R31,HIGH(10)
0001be 940e 0234 	CALL __MODW21
0001c0 016f      	MOVW R12,R30
0001c1 b3e9      	IN   R30,0x19
0001c2 e0f0      	LDI  R31,0
0001c3 01df      	MOVW R26,R30
0001c4 e0ea      	LDI  R30,LOW(10)
0001c5 e0f0      	LDI  R31,HIGH(10)
0001c6 940e 022f 	CALL __DIVW21
0001c8 013f      	MOVW R6,R30
0001c9 01d3      	MOVW R26,R6
0001ca e0ea      	LDI  R30,LOW(10)
0001cb e0f0      	LDI  R31,HIGH(10)
0001cc 940e 0234 	CALL __MODW21
0001ce 015f      	MOVW R10,R30
0001cf 01d3      	MOVW R26,R6
0001d0 e0ea      	LDI  R30,LOW(10)
0001d1 e0f0      	LDI  R31,HIGH(10)
0001d2 940e 022f 	CALL __DIVW21
0001d4 013f      	MOVW R6,R30
0001d5 01d3      	MOVW R26,R6
0001d6 e0ea      	LDI  R30,LOW(10)
0001d7 e0f0      	LDI  R31,HIGH(10)
0001d8 940e 0234 	CALL __MODW21
0001da 014f      	MOVW R8,R30
0001db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
0001dc 91e0 0160 	LDS  R30,_fourthSevenSeg
0001de 91f0 0161 	LDS  R31,_fourthSevenSeg+1
0001e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
0001e1 e0a4      	LDI  R26,LOW(4)
0001e2 e0b0      	LDI  R27,0
0001e3 940c 020e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
0001e5 e0e8      	LDI  R30,LOW(8)
0001e6 bbe2      	OUT  0x12,R30
0001e7 01f6      	MOVW R30,R12
0001e8 e6a2      	LDI  R26,LOW(_sevenSeg)
0001e9 e0b1      	LDI  R27,HIGH(_sevenSeg)
0001ea 0fee      	LSL  R30
0001eb 1fff      	ROL  R31
0001ec 0fae      	ADD  R26,R30
0001ed 1fbf      	ADC  R27,R31
0001ee 91ec      	LD   R30,X
0001ef 58e0      	SUBI R30,-LOW(128)
0001f0 bbe5      	OUT  0x15,R30
0001f1 cfef      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0001f2 e0e1      	LDI  R30,LOW(1)
0001f3 bbe2      	OUT  0x12,R30
0001f4 01f2      	MOVW R30,R4
0001f5 9631      	ADIW R30,1
0001f6 012f      	MOVW R4,R30
0001f7 e0ea      	LDI  R30,LOW(10)
0001f8 e0f0      	LDI  R31,HIGH(10)
0001f9 15e4      	CP   R30,R4
0001fa 05f5      	CPC  R31,R5
0001fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0001fc e0ea      	LDI  R30,LOW(10)
0001fd e0f0      	LDI  R31,HIGH(10)
0001fe 93e0 0160 	STS  _fourthSevenSeg,R30
000200 93f0 0161 	STS  _fourthSevenSeg+1,R31
000202 2c0c      	MOV  R0,R12
000203 280d      	OR   R0,R13
000204 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
000205 dfd6      	RCALL SUBOPT_0x5
000206 9732      	SBIW R30,2
000207 93e0 0160 	STS  _fourthSevenSeg,R30
000209 93f0 0161 	STS  _fourthSevenSeg+1,R31
00020b 2444      	CLR  R4
00020c 2455      	CLR  R5
00020d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00020e 9610      	adiw r26,0
00020f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000210 ed80     +LDI R24 , LOW ( 0x7D0 )
000211 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000212 9701     +SBIW R24 , 1
000213 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000214 95a8      	wdr
000215 9711      	sbiw r26,1
000216 f7c9      	brne __delay_ms0
                 __delay_ms1:
000217 9508      	ret
                 
                 __ANEGW1:
000218 95f1      	NEG  R31
000219 95e1      	NEG  R30
00021a 40f0      	SBCI R31,0
00021b 9508      	RET
                 
                 __DIVW21U:
00021c 2400      	CLR  R0
00021d 2411      	CLR  R1
00021e e190      	LDI  R25,16
                 __DIVW21U1:
00021f 0faa      	LSL  R26
000220 1fbb      	ROL  R27
000221 1c00      	ROL  R0
000222 1c11      	ROL  R1
000223 1a0e      	SUB  R0,R30
000224 0a1f      	SBC  R1,R31
000225 f418      	BRCC __DIVW21U2
000226 0e0e      	ADD  R0,R30
000227 1e1f      	ADC  R1,R31
000228 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000229 60a1      	SBR  R26,1
                 __DIVW21U3:
00022a 959a      	DEC  R25
00022b f799      	BRNE __DIVW21U1
00022c 01fd      	MOVW R30,R26
00022d 01d0      	MOVW R26,R0
00022e 9508      	RET
                 
                 __DIVW21:
00022f d012      	RCALL __CHKSIGNW
000230 dfeb      	RCALL __DIVW21U
000231 f40e      	BRTC __DIVW211
000232 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000233 9508      	RET
                 
                 __MODW21:
000234 94e8      	CLT
000235 ffb7      	SBRS R27,7
000236 c004      	RJMP __MODW211
000237 95a0      	COM  R26
000238 95b0      	COM  R27
000239 9611      	ADIW R26,1
00023a 9468      	SET
                 __MODW211:
00023b fdf7      	SBRC R31,7
00023c dfdb      	RCALL __ANEGW1
00023d dfde      	RCALL __DIVW21U
00023e 01fd      	MOVW R30,R26
00023f f40e      	BRTC __MODW212
000240 dfd7      	RCALL __ANEGW1
                 __MODW212:
000241 9508      	RET
                 
                 __CHKSIGNW:
000242 94e8      	CLT
000243 fff7      	SBRS R31,7
000244 c002      	RJMP __CHKSW1
000245 dfd2      	RCALL __ANEGW1
000246 9468      	SET
                 __CHKSW1:
000247 ffb7      	SBRS R27,7
000248 c006      	RJMP __CHKSW2
000249 95a0      	COM  R26
00024a 95b0      	COM  R27
00024b 9611      	ADIW R26,1
00024c f800      	BLD  R0,0
00024d 9403      	INC  R0
00024e fa00      	BST  R0,0
                 __CHKSW2:
00024f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  43 r1 :   5 r2 :   0 r3 :   0 r4 :  22 r5 :  10 r6 :   6 r7 :   1 
r8 :  12 r9 :   5 r10:  14 r11:   5 r12:  12 r13:   4 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  30 r27:  16 r28:   1 r29:   1 r30: 148 r31:  35 
x  :   5 y  :   0 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :  13 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  21 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   6 
cbi   :  17 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  29 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  11 cpc   :  11 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  24 ld    :   2 ldd   :   0 ldi   :  71 
lds   :   6 lpm   :   7 lsl   :   3 lsr   :   0 mov   :   5 movw  :  49 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   0 out   :  24 pop   :   0 push  :   0 rcall :  54 ret   :  19 
reti  :   0 rjmp  :  42 rol   :   5 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  16 sbic  :  12 sbis  :   0 sbiw  :  17 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   3 std   :   0 sts   :   8 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004a0   1140     44   1184   16384   7.2%
[.dseg] 0x000060 0x000176      0     22     22    1024   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
