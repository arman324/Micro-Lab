;#include <define.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;void ioInit(){
; 0001 0004 void ioInit(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0005 
; 0001 0006     // Input/Output Ports initialization
; 0001 0007     // Port A initialization
; 0001 0008     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0009     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 000A     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 000B     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000C 
; 0001 000D     // Port B initialization
; 0001 000E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0001 000F     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0010     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0001 0011     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0012 
; 0001 0013     // Port C initialization
; 0001 0014     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0001 0015     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0016     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0001 0017     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0018 
; 0001 0019     // Port D initialization
; 0001 001A     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 001B     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 001C     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 001D     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 001E 
; 0001 001F }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void timerInit_Q3(){
; 0001 0021 void timerInit_Q3(){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0022 
; 0001 0023     // Timer/Counter 0 initialization
; 0001 0024     // Clock source: System Clock
; 0001 0025     // Clock value: 7.813 kHz
; 0001 0026     // Mode: Phase correct PWM top=0xFF
; 0001 0027     // OC0 output: Non-Inverted PWM
; 0001 0028     // Timer Period: 65.28 ms
; 0001 0029     // Output Pulse(s):
; 0001 002A     // OC0 Period: 65.28 ms Width: 32.768 ms
; 0001 002B     TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 002C     TCNT0=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 002D     OCR0=0x80;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 002E 
; 0001 002F     // Timer/Counter 1 initialization
; 0001 0030     // Clock source: System Clock
; 0001 0031     // Clock value: Timer1 Stopped
; 0001 0032     // Mode: Normal top=0xFFFF
; 0001 0033     // OC1A output: Disconnected
; 0001 0034     // OC1B output: Disconnected
; 0001 0035     // Noise Canceler: Off
; 0001 0036     // Input Capture on Falling Edge
; 0001 0037     // Timer1 Overflow Interrupt: Off
; 0001 0038     // Input Capture Interrupt: Off
; 0001 0039     // Compare A Match Interrupt: Off
; 0001 003A     // Compare B Match Interrupt: Off
; 0001 003B     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 003C     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 003D     TCNT1H=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 003E     TCNT1L=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 003F     ICR1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0040     ICR1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0041     OCR1AH=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0042     OCR1AL=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0043     OCR1BH=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0044     OCR1BL=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0045 
; 0001 0046     // Timer/Counter 2 initialization
; 0001 0047     // Clock source: System Clock
; 0001 0048     // Clock value: Timer2 Stopped
; 0001 0049     // Mode: Normal top=0xFF
; 0001 004A     // OC2 output: Disconnected
; 0001 004B     ASSR=0<<AS2;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 004C     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 004D     TCNT2=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 004E     OCR2=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 004F 
; 0001 0050     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0051     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0052 
; 0001 0053 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;void timerInit_Q1_Q2(){
; 0001 0055 void timerInit_Q1_Q2(){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0056 
; 0001 0057     // Timer/Counter 0 initialization
; 0001 0058     // Clock source: System Clock
; 0001 0059     // Clock value: Timer 0 Stopped
; 0001 005A     // Mode: Normal top=0xFF
; 0001 005B     // OC0 output: Disconnected
; 0001 005C     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 005D     TCNT0=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 005E     OCR0=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 005F 
; 0001 0060     // Timer/Counter 1 initialization
; 0001 0061     // Clock source: System Clock
; 0001 0062     // Clock value: Timer1 Stopped
; 0001 0063     // Mode: Normal top=0xFFFF
; 0001 0064     // OC1A output: Disconnected
; 0001 0065     // OC1B output: Disconnected
; 0001 0066     // Noise Canceler: Off
; 0001 0067     // Input Capture on Falling Edge
; 0001 0068     // Timer1 Overflow Interrupt: Off
; 0001 0069     // Input Capture Interrupt: Off
; 0001 006A     // Compare A Match Interrupt: Off
; 0001 006B     // Compare B Match Interrupt: Off
; 0001 006C     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 006D     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 006E     TCNT1H=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 006F     TCNT1L=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0070     ICR1H=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 0071     ICR1L=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 0072     OCR1AH=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 0073     OCR1AL=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0074     OCR1BH=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0075     OCR1BL=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 0076 
; 0001 0077     // Timer/Counter 2 initialization
; 0001 0078     // Clock source: System Clock
; 0001 0079     // Clock value: Timer2 Stopped
; 0001 007A     // Mode: Normal top=0xFF
; 0001 007B     // OC2 output: Disconnected
; 0001 007C     ASSR=0<<AS2;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 007D     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 007E     TCNT2=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 007F     OCR2=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0080 
; 0001 0081     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0082     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 0083 
; 0001 0084 
; 0001 0085 }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;void interruptInit(){
; 0001 0087 void interruptInit(){
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0088     // External Interrupt(s) initialization
; 0001 0089     // INT0: Off
; 0001 008A     // INT1: Off
; 0001 008B     // INT2: Off
; 0001 008C     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 008D     MCUCSR=(0<<ISC2);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 008E 
; 0001 008F     // USART initialization
; 0001 0090     // USART disabled
; 0001 0091     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0092 
; 0001 0093 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;void ADCinit_Q1_Q3(){
; 0001 0095 void ADCinit_Q1_Q3(){
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0096     // Analog Comparator initialization
; 0001 0097     // Analog Comparator: Off
; 0001 0098     // The Analog Comparator's positive input is
; 0001 0099     // connected to the AIN0 pin
; 0001 009A     // The Analog Comparator's negative input is
; 0001 009B     // connected to the AIN1 pin
; 0001 009C     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 009D 
; 0001 009E     // ADC initialization
; 0001 009F     // ADC Clock frequency: 1000.000 kHz
; 0001 00A0     // ADC Voltage Reference: AVCC pin
; 0001 00A1     // ADC Auto Trigger Source: Free Running
; 0001 00A2     ADMUX=ADC_VREF_TYPE;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 00A3     ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 00A4     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 00A5 
; 0001 00A6     // SPI initialization
; 0001 00A7     // SPI disabled
; 0001 00A8     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0001 00A9 
; 0001 00AA     // TWI initialization
; 0001 00AB     // TWI disabled
; 0001 00AC     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 00AD }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;void ADCinit_Q2(){
; 0001 00AF void ADCinit_Q2(){
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 00B0 
; 0001 00B1     // Analog Comparator initialization
; 0001 00B2     // Analog Comparator: Off
; 0001 00B3     // The Analog Comparator's positive input is
; 0001 00B4     // connected to the AIN0 pin
; 0001 00B5     // The Analog Comparator's negative input is
; 0001 00B6     // connected to the AIN1 pin
; 0001 00B7     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 00B8 
; 0001 00B9     // ADC initialization
; 0001 00BA     // ADC Clock frequency: 1000.000 kHz
; 0001 00BB     // ADC Voltage Reference: AVCC pin
; 0001 00BC     // ADC Auto Trigger Source: Free Running
; 0001 00BD     ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 00BE     ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 00BF     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 00C0 
; 0001 00C1     // SPI initialization
; 0001 00C2     // SPI disabled
; 0001 00C3     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 00C4 
; 0001 00C5     // TWI initialization
; 0001 00C6     // TWI disabled
; 0001 00C7     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 00C8 
; 0001 00C9     // Global enable interrupts
; 0001 00CA     #asm("sei")
;PCODE: $00000099 VOL: 0
	sei
;PCODE: $0000009A VOL: 0
; 0001 00CB 
; 0001 00CC 
; 0001 00CD }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0001 00D2 {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 00D3     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000009F VOL: 0
;	adc_input -> Y+0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 00D4     // Delay needed for the stabilization of the ADC input voltage
; 0001 00D5     delay_us(10);
;PCODE: $000000A3 VOL: 0
; 0001 00D6     // Start the AD conversion
; 0001 00D7     ADCSRA|=(1<<ADSC);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 00D8     // Wait for the AD conversion to complete
; 0001 00D9     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 00DA     ADCSRA|=(1<<ADIF);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 00DB     return ADCW;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 00DC }
;PCODE: $000000B1 VOL: 0
;
;void question_01(){
; 0001 00DE void question_01(){
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 00DF     i = 0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 00E0     result = 0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 00E1     temp1 = 0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 00E2     temp2 = 0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 00E3 
; 0001 00E4     timerInit_Q1_Q2();
;PCODE: $000000BC VOL: 0
; 0001 00E5     interruptInit();
;PCODE: $000000BD VOL: 0
; 0001 00E6     ADCinit_Q1_Q3();
;PCODE: $000000BE VOL: 0
; 0001 00E7 
; 0001 00E8     lcd_clear();
;PCODE: $000000BF VOL: 0
; 0001 00E9     lcd_gotoxy(0,0);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 00EA     lcd_puts("Question_01");
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0001 00EB 
; 0001 00EC     for(i = 0; i < 8; i++){
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 00ED         result = read_adc(i);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 00EE         temp2 = result * 5;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 00EF         temp1 = temp2 / 1023;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 00F0         temp1 = temp1 * 1000;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 00F1         result = floor(temp1); //milliVolt
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 00F2         sprintf(resultInString,"ADC %d: %d mV",i,result);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 00F3         lcd_gotoxy(0,1);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0001 00F4         lcd_puts(space);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0001 00F5         lcd_gotoxy(0,1);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0001 00F6         lcd_puts(resultInString);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0001 00F7         delay_ms(1000);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 00F8     }
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 00F9 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0

	.DSEG
_0x20006:
	.BYTE 0xC
;
;void question_02(){
; 0001 00FB void question_02(){

	.CSEG
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 00FC 
; 0001 00FD 
; 0001 00FE     timerInit_Q1_Q2();
;PCODE: $00000110 VOL: 0
; 0001 00FF     interruptInit();
;PCODE: $00000111 VOL: 0
; 0001 0100     ADCinit_Q2();
;PCODE: $00000112 VOL: 0
; 0001 0101        i = -1;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 0102 }
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;
;void question_03(){
; 0001 0104 void question_03(){
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 0105     timerInit_Q3();
;PCODE: $00000119 VOL: 0
; 0001 0106     interruptInit();
;PCODE: $0000011A VOL: 0
; 0001 0107     ADCinit_Q1_Q3();
;PCODE: $0000011B VOL: 0
; 0001 0108     #asm("sei")
;PCODE: $0000011C VOL: 0
	sei
;PCODE: $0000011D VOL: 0
; 0001 0109 
; 0001 010A 
; 0001 010B }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;
;void question_04(){
; 0001 010D void question_04(){
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 010E     question_01();
;PCODE: $00000122 VOL: 0
; 0001 010F     lcd_clear();
;PCODE: $00000123 VOL: 0
; 0001 0110     lcd_gotoxy(0,0);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0001 0111     lcd_puts("See the Pulse   for 15 sec");
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 0112     question_03();
;PCODE: $0000012B VOL: 0
; 0001 0113     delay_ms(15000);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 0114 
; 0001 0115     question_02();
;PCODE: $0000012E VOL: 0
; 0001 0116 
; 0001 0117 }
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0

	.DSEG
_0x2000A:
	.BYTE 0x1B
