;#include <define.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;void ioInit(){
; 0001 0004 void ioInit(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0005     // Port C initialization
; 0001 0006     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0001 0007     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0008     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0001 0009     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000A 
; 0001 000B     // Port D initialization
; 0001 000C     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0001 000D     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000E 
; 0001 000F }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;
;void UART_INIT(char* RX_mode, char* TX_mode,long baudrate){   /////////////// QUESTION_01 ////////////////
; 0001 0012 void UART_INIT(char* RX_mode, char* TX_mode,long baudrate){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0013     calculate_UBBR = ((8 * 1000000) / (16 * baudrate))-1;
;PCODE: $00000019 VOL: 0
;	*RX_mode -> Y+6
;	*TX_mode -> Y+4
;	baudrate -> Y+0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0014     calculate_UBBR_int = (int)calculate_UBBR;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0015 
; 0001 0016     if (strcmp(RX_mode, "OFF") == 0 && strcmp(TX_mode, "OFF") == 0){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0017         lcd_clear();
;PCODE: $00000038 VOL: 0
; 0001 0018         lcd_gotoxy(0,0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0019         lcd_puts("USART disabled");
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 001A 
; 0001 001B         // USART disabled
; 0001 001C         UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 001D     }
; 0001 001E     else if (strcmp(RX_mode, "enable_nonInterrupt") == 0 && strcmp(TX_mode, "enable_nonInterrupt") == 0){
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 001F         lcd_clear();
;PCODE: $00000056 VOL: 0
; 0001 0020         lcd_gotoxy(0,0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 0021         lcd_puts("enter 11 character");
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0022         UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0023         UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0024         UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0025         if (calculate_UBBR_int < 0xFF){
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 0026                 UBRRL = calculate_UBBR_int;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0027         }
; 0001 0028         else {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 0029                 UBRRL = calculate_UBBR_int % 0xFF;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 002A                 UBRRH = calculate_UBBR_int / 0xFF;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 002B         }
;PCODE: $00000073 VOL: 0
; 0001 002C     }
; 0001 002D     else if (strcmp(RX_mode, "enable_interrupt") == 0 && strcmp(TX_mode, "enable_nonInterrupt") == 0){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 002E         UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 002F         UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 0030         UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0031         if (calculate_UBBR_int < 0xFF){
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0032                 UBRRL = calculate_UBBR_int;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0033         }
; 0001 0034         else {
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0035                 UBRRL = calculate_UBBR_int % 0xFF;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0036                 UBRRH = calculate_UBBR_int / 0xFF;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0037         }
;PCODE: $0000009D VOL: 0
; 0001 0038             #asm("sei")
;PCODE: $0000009E VOL: 0
	sei
;PCODE: $0000009F VOL: 0
; 0001 0039     }
; 0001 003A     else if (strcmp(RX_mode, "enable_interrupt") == 0 && strcmp(TX_mode, "enable_interrupt") == 0){
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 003B         UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 003C         UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 003D         UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 003E          if (calculate_UBBR_int < 0xFF){
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 003F                 UBRRL = calculate_UBBR_int;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 0040         }
; 0001 0041         else {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 0042                 UBRRL = calculate_UBBR_int % 0xFF;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0001 0043                 UBRRH = calculate_UBBR_int / 0xFF;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 0044         }
;PCODE: $000000C9 VOL: 0
; 0001 0045             #asm("sei")
;PCODE: $000000CA VOL: 0
	sei
;PCODE: $000000CB VOL: 0
; 0001 0046     }
; 0001 0047     else {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 0048         // RX_mode = enable_nonInterrupt
; 0001 0049         // TX_mode = enable_nonInterrupt
; 0001 004A         lcd_clear();
;PCODE: $000000CE VOL: 0
; 0001 004B         lcd_gotoxy(0,0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 004C         lcd_puts("Wrong configuration");
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 004D 
; 0001 004E     }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 004F 
; 0001 0050 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0

	.DSEG
_0x20004:
	.BYTE 0xAD
;
;
;
;void question_02(){
; 0001 0054 void question_02(){

	.CSEG
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0055 
; 0001 0056     //first argument can be: OFF, enable_nonInterrupt, enable_interrupt
; 0001 0057     //second argument can be: OFF, enable_nonInterrupt, enable_interrupt
; 0001 0058     //third argument can be between 110 and 115200
; 0001 0059 
; 0001 005A     //UART_INIT("OFF", "OFF", 110);
; 0001 005B     UART_INIT("enable_nonInterrupt", "enable_nonInterrupt", 9600);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 005C     //UART_INIT("enable_interrupt", "enable_nonInterrupt", 9600);
; 0001 005D     //UART_INIT("enable_interrupt", "enable_interrupt", 9600);
; 0001 005E 
; 0001 005F     puts("\r\nPart 2 is running\r\n");
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 0060 
; 0001 0061     gets(myName,11);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 0062     printf("\r\n");
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0001 0063     sprintf(myNameWithParenthesis,"(%s)",myName);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 0064     puts(myNameWithParenthesis);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 0065 
; 0001 0066 }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0

	.DSEG
_0x2001A:
	.BYTE 0x3E
;
;void question_03(){
; 0001 0068 void question_03(){

	.CSEG
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0069 
; 0001 006A     //first argument can be: OFF, enable_nonInterrupt, enable_interrupt
; 0001 006B     //second argument can be: OFF, enable_nonInterrupt, enable_interrupt
; 0001 006C     //third argument can be between 110 and 115200
; 0001 006D 
; 0001 006E     //UART_INIT("OFF", "OFF", 110);
; 0001 006F     //UART_INIT("enable_nonInterrupt", "enable_nonInterrupt", 9600);
; 0001 0070     UART_INIT("enable_interrupt", "enable_nonInterrupt", 9600);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 0071     //UART_INIT("enable_interrupt", "enable_interrupt", 9600);
; 0001 0072 
; 0001 0073         puts("\r\nPart 3 is running\r\n");
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 0074 
; 0001 0075 
; 0001 0076     myData = getchar3();
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 0077 
; 0001 0078     if (myData == '0'){
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0001 0079         lcd_clear();
;PCODE: $00000118 VOL: 0
; 0001 007A         puts("\r\nData is an integer and 10 * data = 0\r\n");
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 007B     }
; 0001 007C     else if (myData > '0' && myData<= '9'){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0001 007D         lcd_clear();
;PCODE: $00000128 VOL: 0
; 0001 007E         puts("\r\nData is an integer and 10 * data = ");
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 007F         putchar(myData);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 0080         puts("0\r\n");
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 0081     }
; 0001 0082     else if (myData == 'D'){
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0001 0083         puts("\r\n");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 0084         lcd_clear();
;PCODE: $00000139 VOL: 0
; 0001 0085         lcd_gotoxy(0,0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0001 0086         lcd_puts("lcd delete");
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0001 0087     }
; 0001 0088     else if (myData == 'H'){
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0001 0089         lcd_clear();
;PCODE: $00000146 VOL: 0
; 0001 008A         puts("\r\nHi, my name is Arman, welcome to Lab07\r\n");
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 008B     }
; 0001 008C     else{
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0001 008D         lcd_clear();
;PCODE: $0000014C VOL: 0
; 0001 008E         puts("\r\nNo function defined\r\n");
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0001 008F     }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 0090 }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0

	.DSEG
_0x2001B:
	.BYTE 0xDF
;
;void question_04(){
; 0001 0092 void question_04(){

	.CSEG
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0001 0093 
; 0001 0094     //first argument can be: OFF, enable_nonInterrupt, enable_interrupt
; 0001 0095     //second argument can be: OFF, enable_nonInterrupt, enable_interrupt
; 0001 0096     //third argument can be between 110 and 115200
; 0001 0097 
; 0001 0098     //UART_INIT("OFF", "OFF", 110);
; 0001 0099     //UART_INIT("enable_nonInterrupt", "enable_nonInterrupt", 9600);
; 0001 009A     //UART_INIT("enable_interrupt", "enable_nonInterrupt", 9600);
; 0001 009B     UART_INIT("enable_interrupt", "enable_interrupt", 9600);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 009C 
; 0001 009D 
; 0001 009E         puts("\r\nPart 4 is running\r\n");
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0001 009F 
; 0001 00A0 
; 0001 00A1         counter = 0;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0001 00A2         for (i = 0; i < countNumber+1; i++)
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0001 00A3             temp[i] = ' ';
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0001 00A4 while (1){
;PCODE: $0000017D VOL: 0
; 0001 00A5             check = getchar3();
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0001 00A6             temp[counter] = check;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0001 00A7             counter++;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0001 00A8             if (check == 127 || check == 8) {counter -= 2;};
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 00A9             if (check == ')')
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0001 00AA             {
; 0001 00AB                 countNumber = counter;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0001 00AC                 break;
;PCODE: $00000199 VOL: 0
; 0001 00AD             }
; 0001 00AE         }
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0001 00AF           //sprintf(temp,"%d",countNumber);
; 0001 00B0             temp2 = strtok(temp," ");
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0001 00B1             if (countNumber < 7){
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0001 00B2                 lcd_clear();
;PCODE: $000001A6 VOL: 0
; 0001 00B3                 puts("\r\nThe length of the frame is not correct.\r\n");
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0001 00B4             }
; 0001 00B5             else if (strcmp(temp2,"(12345)") == 0)
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0001 00B6             {
; 0001 00B7                 puts("\r\nFrame is correct.\r\n");
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 00B8 
; 0001 00B9                 lcd_clear();
;PCODE: $000001B6 VOL: 0
; 0001 00BA                 lcd_gotoxy(0,0);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0001 00BB                 lcd_puts("12345");
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0001 00BC             }
; 0001 00BD             else {
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 00BE                 lcd_clear();
;PCODE: $000001C0 VOL: 0
; 0001 00BF                 puts("\r\nFrame must be 5 integers.\r\n");
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0001 00C0 
; 0001 00C1             }
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0001 00C2 
; 0001 00C3 }
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0

	.DSEG
_0x20026:
	.BYTE 0xA6
