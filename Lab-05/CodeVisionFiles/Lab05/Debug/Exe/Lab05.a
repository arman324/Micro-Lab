;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/1/2020
;Author  : Arman Riasi
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <define.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;int inputNumber = 0;
;float dutyCycle = 0;
;float ocrNumber = 0;
;int CNT = 0;
;int TempCNT = 0;
;int LeftRight = 1; //Left = 0 & Right = 1

	.DSEG
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025 // Place your code here
; 0000 0026      inputNumber = PINA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0027 
; 0000 0028     dutyCycle = ((inputNumber * 90) / 255) + 5;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0029     ocrNumber = (2.55 * dutyCycle) + 0.5;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002A 
; 0000 002B     OCR0 = floor(ocrNumber);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002C 
; 0000 002D }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0032 {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0033 
; 0000 0034     TCNT2=0x0B; //31.36 ms
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0035 
; 0000 0036     runStepperMotor();
;PCODE: $0000002D VOL: 0
; 0000 0037     calculateSpeed();
;PCODE: $0000002E VOL: 0
; 0000 0038 
; 0000 0039 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;void main(void)
; 0000 003C {
;PCODE: $00000032 VOL: 0
; 0000 003D     ioInit();
;PCODE: $00000033 VOL: 0
; 0000 003E     #asm("sei")
;PCODE: $00000034 VOL: 0
	sei
;PCODE: $00000035 VOL: 0
; 0000 003F     lcd_init(16);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0040 
; 0000 0041     //question_01();
; 0000 0042     //question_03();
; 0000 0043     //question_04();
; 0000 0044     question_05();
;PCODE: $00000038 VOL: 0
; 0000 0045 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
